import java.nio.file.Files
import java.nio.file.Path

plugins {
  id 'com.github.blindpirate.gogradle' version '0.11.4'
}

sonarqube {
  properties {
    property 'sonar.sources', '.'
    property 'sonar.inclusions', '**/*.go'
    property 'sonar.exclusions', '**/generate_source.go,**/*_generated.go,**/build/**,**/vendor/**,**/.gogradle/**'
    property 'sonar.tests', '.'
    property 'sonar.test.inclusions', '**/*_test.go'
    property 'sonar.test.exclusions', '**/build/**,**/vendor/**,**/.gogradle/**'
    property 'sonar.go.tests.reportPaths', "${project.projectDir}/.gogradle/reports/test-report.out"
    property 'sonar.go.coverage.reportPaths', "${project.projectDir}/.gogradle/reports/coverage/profiles/github.com%2FSonarSource%2Fslang-enterprise%2Fsonar-go-to-slang.out"
  }
}

golang {
  packagePath = 'github.com/SonarSource/slang-enterprise/sonar-go-to-slang'
  goVersion = '1.12.6'
}

task generateSource(type: com.github.blindpirate.gogradle.Go) {
    go 'run generate_source.go'
}

task generateTestReport(type: com.github.blindpirate.gogradle.Go) {
  // make this task depends on goVendor to guarantee all dependency packages are installed into vendor
  dependsOn goVendor
  // force module support to enable vendor module
  environment GO111MODULE: 'on'
  try {
    go ('test -json') {
      stdout writeTo('.gogradle/reports/test-report.out')
    }
  } finally {
    removeReadOnlyPermissions()
  }
}

goVendor.doLast {
  removeReadOnlyPermissions()
}
installDependencies.dependsOn generateSource
clean.dependsOn goClean
test.dependsOn goCheck
build.dependsOn goBuild
goBuild.dependsOn generateTestReport
generateTestReport.dependsOn goTest

goBuild {
  targetPlatform = ['linux-amd64', 'windows-amd64', 'darwin-amd64']
  outputLocation = './build/sonar-go-to-slang-${GOOS}-${GOARCH}${GOEXE}'
}

// files in '.gogradle' directory can have readonly flags that prevent "git clean -fdx" to succeed
def removeReadOnlyPermissions() {
  Files.walk(file('.gogradle').toPath()).forEach({ Path p -> p.toFile().setWritable(true) })
}
