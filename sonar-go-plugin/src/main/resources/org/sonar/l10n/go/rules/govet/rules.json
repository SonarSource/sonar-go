[
  {
    "key": "appends",
    "name": "Missing values after append",
    "description": "Check for missing values after append.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "asmdecl",
    "name": "Assembly mismatch against Go declarations",
    "description": "Mismatches between assembly files and Go declarations.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "assign",
    "name": "Useless assignments",
    "description": "Check for useless assignments.",
    "type": "CODE_SMELL",
    "code": {
      "attribute": "CLEAR",
      "impacts": {
        "MAINTAINABILITY": "LOW"
      }
    }
  },
  {
    "key": "atomic",
    "name": "Common mistakes using the sync/atomic package",
    "description": "Check for common mistakes using the sync/atomic package.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "bools",
    "name": "Common mistakes involving boolean operators",
    "description": "Check for common mistakes involving boolean operators.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "buildtag",
    "name": "Check //go:build and // +build directives",
    "description": "Check //go:build and // +build directives.",
    "type": "CODE_SMELL",
    "code": {
      "attribute": "CONVENTIONAL",
      "impacts": {
        "MAINTAINABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "cgocall",
    "name": "Invalid uses of cgo",
    "description": "Detect some violations of the cgo pointer passing rules.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "HIGH"
      }
    }
  },
  {
    "key": "composites",
    "name": "Unkeyed composite literals",
    "description": "Check for composite literals that do not use the field-keyed syntax.",
    "type": "CODE_SMELL",
    "code": {
      "attribute": "CONVENTIONAL",
      "impacts": {
        "MAINTAINABILITY": "LOW"
      }
    }
  },
  {
    "key": "copylocks",
    "name": "Locks erroneously passed by value",
    "description": "Check for locks erroneously passed by value.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "HIGH"
      }
    }
  },
  {
    "key": "defers",
    "name": "Common mistakes in defer statements",
    "description": "Report common mistakes in defer statements.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "directive",
    "name": "Misuse of Go toolchain directives such as //go:debug",
    "description": "Check Go toolchain directives such as //go:debug.",
    "type": "CODE_SMELL",
    "code": {
      "attribute": "CLEAR",
      "impacts": {
        "MAINTAINABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "errorsas",
    "name": "Non-pointer or non-error values passed to errors.As",
    "description": "Report passing non-pointer or non-error values to errors.As.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "framepointer",
    "name": "Assembly clobbers the frame pointer before saving it",
    "description": "Report assembly that clobbers the frame pointer before saving it.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "httpresponse",
    "name": "Mistakes using HTTP responses",
    "description": "Check for mistakes using HTTP responses.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "HIGH"
      }
    }
  },
  {
    "key": "ifaceassert",
    "name": "Impossible interface-to-interface type assertions",
    "description": "Detect impossible interface-to-interface type assertions.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "HIGH"
      }
    }
  },
  {
    "key": "loopclosure",
    "name": "References to loop variables from within nested functions",
    "description": "Check references to loop variables from within nested functions (in go<=1.21).",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "lostcancel",
    "name": "Cancel func returned by context.WithCancel should be called",
    "description": "Check cancel func returned by context.WithCancel is called.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "nilfunc",
    "name": "Useless comparisons between functions and nil",
    "description": "Check for useless comparisons between functions and nil.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "printf",
    "name": "Consistency between Printf format strings and arguments",
    "description": "Check consistency of Printf format strings and arguments.",
    "type": "CODE_SMELL",
    "code": {
      "attribute": "CLEAR",
      "impacts": {
        "MAINTAINABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "shift",
    "name": "Shift is equal or exceeds the width of the integer",
    "description": "Check for shifts that equal or exceed the width of the integer.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "sigchanyzer",
    "name": "Unbuffered channel of os.Signal",
    "description": "Check for unbuffered channel of os.Signal.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "slog",
    "name": "Invalid structured logging call",
    "description": "Check for invalid structured logging calls.",
    "type": "CODE_SMELL",
    "code": {
      "attribute": "CLEAR",
      "impacts": {
        "MAINTAINABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "stdmethods",
    "name": "Incorrect signature of a method of well-known interfaces",
    "description": "Check signature of methods of well-known interfaces.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "stdversion",
    "name": "Usages of too-new standard library symbols",
    "description": "Report uses of too-new standard library symbols.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "stringintconv",
    "name": "Potentially undesirable string(int) conversions",
    "description": "Check for string(int) conversions.",
    "type": "CODE_SMELL",
    "code": {
      "attribute": "CONVENTIONAL",
      "impacts": {
        "MAINTAINABILITY": "LOW"
      }
    }
  },
  {
    "key": "structtag",
    "name": "Validity of struct field tags",
    "description": "Check that struct field tags conform to reflect.StructTag.Get.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "testinggoroutine",
    "name": "Call to (*testing.T).Fatal from goroutines started by a test",
    "description": "Report calls to (*testing.T).Fatal from goroutines started by a test.",
    "type": "BUG",
    "code": {
      "attribute": "TESTED",
      "impacts": {
        "MAINTAINABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "tests",
    "name": "Common mistaken usages of tests and examples",
    "description": "Check for common mistaken usages of tests and examples.",
    "type": "BUG",
    "code": {
      "attribute": "TESTED",
      "impacts": {
        "MAINTAINABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "timeformat",
    "name": "Call of (time.Time).Format or time.Parse with yyyy-dd-mm",
    "description": "Check for calls of (time.Time).Format or time.Parse with yyyy-dd-mm.",
    "type": "CODE_SMELL",
    "code": {
      "attribute": "CLEAR",
      "impacts": {
        "RELIABILITY": "LOW"
      }
    }
  },
  {
    "key": "unmarshal",
    "name": "Passing non-pointer or non-interface values to unmarshal",
    "description": "Report passing non-pointer or non-interface values to unmarshal.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "unreachable",
    "name": "Unreachable code",
    "description": "Check for unreachable code.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "unsafeptr",
    "name": "Invalid conversions of uintptr to unsafe.Pointer",
    "description": "Check for invalid conversions of uintptr to unsafe.Pointer.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  },
  {
    "key": "unusedresult",
    "name": "Unused results of calls to some functions",
    "description": "Check for unused results of calls to some functions.",
    "type": "BUG",
    "code": {
      "attribute": "LOGICAL",
      "impacts": {
        "RELIABILITY": "MEDIUM"
      }
    }
  }
]
