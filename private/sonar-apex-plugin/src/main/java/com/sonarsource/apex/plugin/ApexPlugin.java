/*
 * Copyright (C) 2018-2024 SonarSource SA
 * All rights reserved
 * mailto:info AT sonarsource DOT com
 */
package com.sonarsource.apex.plugin;

import com.sonarsource.apex.externalreport.PmdRulesDefinition;
import com.sonarsource.apex.externalreport.PmdSensor;
import com.sonarsource.plugins.license.api.LicensedPluginRegistration;
import org.sonar.api.Plugin;
import org.sonar.api.SonarProduct;
import org.sonar.api.config.PropertyDefinition;
import org.sonar.api.resources.Qualifiers;

public class ApexPlugin implements Plugin {
  private static final String PLUGIN_KEY = "sonarapex";

  public static final String APEX_LANGUAGE_KEY = "apex";
  static final String APEX_LANGUAGE_NAME = "Apex";

  static final String APEX_FILE_SUFFIXES_DEFAULT_VALUE = ".cls,.trigger";
  static final String APEX_FILE_SUFFIXES_KEY = "sonar.apex.file.suffixes";
  static final String REPORT_PATH_KEY = "sonar.apex.coverage.reportPath";

  static final String APEX_REPOSITORY_KEY = "apex";
  static final String REPOSITORY_NAME = "SonarAnalyzer";
  static final String PROFILE_NAME = "Sonar way";

  private static final String GENERAL = "General";
  private static final String APEX_CATEGORY = "Apex";
  private static final String TEST_COVERAGE_SUBCATEGORY = "Test and Coverage";

  @Override
  public void define(Context context) {
    // the key must match the key defined in META-INF/MANIFEST
    context.addExtension(LicensedPluginRegistration.forPlugin(PLUGIN_KEY));

    context.addExtensions(
        ApexLanguage.class,
        ApexSensor.class,
        ApexRulesDefinition.class);

    if (context.getRuntime().getProduct() != SonarProduct.SONARLINT) {
      context.addExtensions(
          SFDXCoverageSensor.class,
          ApexProfileDefinition.class,

          PropertyDefinition.builder(APEX_FILE_SUFFIXES_KEY)
              .defaultValue(APEX_FILE_SUFFIXES_DEFAULT_VALUE)
              .name("File Suffixes")
              .description("List of suffixes for files to analyze.")
              .subCategory(GENERAL)
              .category(APEX_CATEGORY)
              .multiValues(true)
              .onQualifiers(Qualifiers.PROJECT)
              .build(),

          PropertyDefinition.builder(REPORT_PATH_KEY)
              .name("Path to coverage report")
              .description("Path to coverage report file (test-result-codecoverage.json) generated by Salesforce CLI test command for Apex. "
                + "The path may be absolute or relative to the project base directory.")
              .category(APEX_CATEGORY)
              .subCategory(TEST_COVERAGE_SUBCATEGORY)
              .onQualifiers(Qualifiers.PROJECT)
              .multiValues(false)
              .build()
      );

      context.addExtensions(
        PmdSensor.class,
        PmdRulesDefinition.class,
        PropertyDefinition.builder(PmdSensor.REPORT_PROPERTY_KEY)
          .name("PMD Report Files")
          .description("Paths (absolute or relative) to xml files with PMD issues.")
          .category("External Analyzers")
          .subCategory(APEX_CATEGORY)
          .onQualifiers(Qualifiers.PROJECT)
          .multiValues(true)
          .build());
    }
  }
}
