plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.2'
}

configurations {
    yguard
}

dependencies {
    implementation 'com.salesforce:apex-jorje-lsp-minimized'
    implementation project(':private:sonar-apex-ast-visitor')
    compileOnly 'com.sonarsource.license:license-api'
    compileOnly 'org.sonarsource.api.plugin:sonar-plugin-api'
    testImplementation 'org.sonarsource.sonarqube:sonar-plugin-api-impl'
    testImplementation 'org.sonarsource.api.plugin:sonar-plugin-api-test-fixtures'
    implementation 'org.sonarsource.analyzer-commons:sonar-analyzer-commons'
    implementation 'org.sonarsource.analyzer-commons:sonar-xml-parsing'
    implementation project(':slang-plugin')
    implementation project(':slang-checks')
    implementation project(':slang-api')
    testImplementation project(':slang-testing')
    testImplementation project(':slang-antlr')
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
    testImplementation 'org.assertj:assertj-core'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'io.github.classgraph:classgraph'
    testImplementation 'org.sonarsource.analyzer-commons:sonar-analyzer-test-commons'
    testImplementation 'com.sonarsource.license:license-api'
    yguard 'com.yworks:yguard'
}


shadowJar {
    minimize { }
    exclude 'javax/xml/**'

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    manifest {
        def displayVersion = (project.buildNumber == null ? project.version : project.version.substring(0, project.version.lastIndexOf('.')) + " (build ${project.buildNumber})")
        def buildDate = new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        attributes(
                'Build-Time': buildDate,
                'Implementation-Build': 'git rev-parse HEAD'.execute().text.trim(),
                'Plugin-BuildDate': buildDate,
                'Plugin-ChildFirstClassLoader': 'false',
                'Plugin-Class': 'com.sonarsource.apex.plugin.ApexPlugin',
                'Plugin-Description': 'Code Analyzer for Apex',
                'Plugin-Developers': 'SonarSource Team',
                'Plugin-Display-Version': displayVersion,
                'Plugin-Homepage': 'http://redirect.sonarsource.com/plugins/apex.html',
                'Plugin-IssueTrackerUrl': 'https://jira.sonarsource.com/browse/SONARSLANG',
                'Plugin-RequirePlugins': 'license:3.3',
                'Plugin-Key': 'sonarapex',
                'Plugin-License': 'SonarSource',
                'Plugin-TermsConditionsUrl': 'http://dist.sonarsource.com/SonarSource_Terms_And_Conditions.pdf',
                'Plugin-Name': 'Apex Code Quality and Security',
                'Plugin-Organization': 'SonarSource',
                'Plugin-OrganizationUrl': 'http://www.sonarsource.com',
                'Plugin-SourcesUrl': 'https://github.com/SonarSource/slang-enterprise',
                'Plugin-Version': project.version,
                'Plugin-RequiredForLanguages': 'apex',
                'Sonar-Version': '6.7',
                'SonarLint-Supported': 'true',
                'Version': "${project.version}",
                'Jre-Min-Version': '11',
        )
    }
}

artifacts {
    archives shadowJar
}

task obfuscate(dependsOn: 'shadowJar') {
    if (System.getProperty("skipObfuscation") == 'true') {
        return
    }
    doLast {
        ant.taskdef(name: 'yguard', classname: 'com.yworks.yguard.YGuardTask', classpath: configurations.yguard.asPath)
        ant.yguard() {
            inoutpair(in: shadowJar.outputs.files.singleFile, out: "${buildDir}/libs/${shadowJar.archiveName}")
            rename(logfile: "${buildDir}/libs/yguard.log.xml", replaceClassNameStrings: 'true') {
                keep {
                    'class'() {
                        patternset {
                            include(name: '**/*')
                            exclude(name: 'com/sonarsource/**/*')
                        }
                    }
                }
            }
        }
        enforceJarSizeAndCheckContent(shadowJar.archiveFile.get().asFile, 3_200_000L, 3_500_000L)
    }
}
build.dependsOn obfuscate

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact source: shadowJar, classifier: null
            artifact source: "${buildDir}/libs/yguard.log.xml", classifier: 'yguard'
        }
    }
}

artifactoryPublish.skip = false

artifactory {
  publish {
    contextUrl = System.getenv('ARTIFACTORY_URL')
    repository {
      repoKey = System.getenv('ARTIFACTORY_DEPLOY_REPO_PRIVATE')
      username = System.getenv('ARTIFACTORY_DEPLOY_USERNAME_PRIVATE')
      password = System.getenv('ARTIFACTORY_DEPLOY_PASSWORD_PRIVATE')
    }
    defaults {
      properties = [
        'build.name': 'slang-enterprise',
        'build.number': System.getenv('BUILD_NUMBER'),
        'pr.branch.target': System.getenv('PULL_REQUEST_BRANCH_TARGET'),
        'pr.number': System.getenv('PULL_REQUEST_NUMBER'),
        'vcs.branch': System.getenv('GIT_BRANCH'),
        'vcs.revision': System.getenv('GIT_COMMIT'),
        'version': version
      ]
      publications('mavenJava')
    }
  }
}
