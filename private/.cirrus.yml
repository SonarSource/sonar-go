env:
  ARTIFACTORY_URL: VAULT[development/kv/data/repox data.url]
  ARTIFACTORY_PRIVATE_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader username]
  ARTIFACTORY_PRIVATE_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]
  ARTIFACTORY_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-private-reader access_token]

  # Deploy public artifact to artifactory
  ARTIFACTORY_DEPLOY_USERNAME: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer username]
  ARTIFACTORY_DEPLOY_PASSWORD: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-qa-deployer access_token]
  ARTIFACTORY_DEPLOY_REPO: sonarsource-public-qa
  # Deploy private artifact to artifactory
  ARTIFACTORY_DEPLOY_REPO_PRIVATE: sonarsource-private-qa

  ORG_GRADLE_PROJECT_signingKey: VAULT[development/kv/data/sign data.key]
  ORG_GRADLE_PROJECT_signingPassword: VAULT[development/kv/data/sign data.passphrase]
  ORG_GRADLE_PROJECT_signingKeyId: 0x7DCD4258

  # access license key and its
  GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-its token]

  # Use bash (instead of sh on linux or cmd.exe on windows)
  CIRRUS_SHELL: bash

  GIT_SUB_MODULE: ""
  GRADLE_USER_HOME: ${CIRRUS_WORKING_DIR}/.gradle

linux_image_template: &LINUX_IMAGE
  image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j11-g7-latest
  cluster_name: ${CIRRUS_CLUSTER_NAME}
  region: eu-central-1
  namespace: default
  use_in_memory_disk: true

linux_1_cpu_1G_template: &LINUX_1_CPU_1G
  eks_container:
    <<: *LINUX_IMAGE
    cpu: 1
    memory: 1G

linux_3_5_cpu_7G_template: &LINUX_3_5_CPU_7G
  eks_container:
    <<: *LINUX_IMAGE
    cpu: 3.5
    memory: 7G

linux_6_cpu_12G_java_17_template: &LINUX_6_CPU_12G_JAVA_17
  eks_container:
    <<: *LINUX_IMAGE
    image: ${CIRRUS_AWS_ACCOUNT}.dkr.ecr.eu-central-1.amazonaws.com/base:j17-g7-latest
    cpu: 6
    memory: 24G

windows_4_cpu_15G_template: &WINDOWS_4_CPU_15G
  ec2_instance:
    experimental: true # see https://github.com/cirruslabs/cirrus-ci-docs/issues/1051
    image: base-windows-jdk17-v*
    platform: windows
    region: eu-central-1
    type: t3.xlarge
    subnet_id: ${CIRRUS_AWS_SUBNET}
    preemptible: false
    disk: 128
    use_ssd: true

setup_gradle_cache_template: &SETUP_GRADLE_CACHE
  gradle_cache:
    folder: ${GRADLE_USER_HOME}/caches
    fingerprint_script:
      - echo $CIRRUS_OS
      - cat **/*.gradle* **/gradle*.properties || true
    populate_script: mkdir -p ${GRADLE_USER_HOME}/caches

cleanup_gradle_cache_script_template: &CLEANUP_GRADLE_CACHE_SCRIPT
  cleanup_gradle_script:
    - rm -rf "${GRADLE_USER_HOME}"/caches/7.*/
    - rm -rf "${GRADLE_USER_HOME}"/daemon/
    - rm -rf "${GRADLE_USER_HOME}"/caches/transforms-*
    - rm -rf "${GRADLE_USER_HOME}"/caches/journal-*
    - /usr/bin/find "${GRADLE_USER_HOME}/caches/" -name "*.lock" -type f -delete

gradle_its_template: &GRADLE_ITS_TEMPLATE
  <<: *SETUP_GRADLE_CACHE
  run_its_script:
    - |
      if [ -n "${GIT_SUB_MODULE}" ]; then
        init_git_submodules "${GIT_SUB_MODULE}"
      fi
    - source cirrus-env QA
    - ./gradlew "${GRADLE_TASK}" "-P${ITS_PROJECT}"
      "-Dsonar.runtimeVersion=${SQ_VERSION}"
      "-Dorchestrator.configUrl=file:///$CIRRUS_WORKING_DIR/private/orchestrator.properties"
      "-Dorchestrator.artifactory.accessToken=${ARTIFACTORY_ACCESS_TOKEN}"
      "-DbuildNumber=$BUILD_NUMBER"
      -I "${GRADLE_HOME}/init.d/repoxAuth.init.gradle.kts"
      -Pqa --info --stacktrace --console plain --no-daemon --build-cache
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT


  gradle_its_template: &GRADLE_ITS_TEMPLATE_WIN
    <<: *SETUP_GRADLE_CACHE
    run_its_script:
      - |
        if [ -n "${GIT_SUB_MODULE}" ]; then
          init_git_submodules "${GIT_SUB_MODULE}"
        fi
      - source cirrus-env QA
      - ./gradlew "${GRADLE_TASK}" "-P${ITS_PROJECT}"
        "-Dsonar.runtimeVersion=${SQ_VERSION}"
        "-Dorchestrator.configUrl=file:///$CIRRUS_WORKING_DIR/private/orchestrator.properties"
        "-Dorchestrator.artifactory.accessToken=${ARTIFACTORY_ACCESS_TOKEN}"
        "-DbuildNumber=$BUILD_NUMBER"
        -Pqa --info --stacktrace --console plain --no-daemon --build-cache
    <<: *CLEANUP_GRADLE_CACHE_SCRIPT

only_if_sonarsource_qa_template: &ONLY_IF_SONARSOURCE_QA
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && $CIRRUS_TAG == "" && ($CIRRUS_PR != "" || $CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "dogfood-on-.*")

qa_task_filter_template: &QA_TASK_FILTER
  depends_on:
    - build
  <<: *ONLY_IF_SONARSOURCE_QA

build_task:
  <<: *LINUX_6_CPU_12G_JAVA_17
  <<: *SETUP_GRADLE_CACHE
  go_cache:
    folder: ${HOME}/go
  env:
    # analysis on next
    SONAR_TOKEN: VAULT[development/kv/data/next data.token]
    SONAR_HOST_URL: https://next.sonarqube.com/sonarqube
    #allow deployment of pull request artifacts to repox
    DEPLOY_PULL_REQUEST: true
    GOPATH: ${HOME}/go
  build_script:
    - source cirrus-env BUILD-PRIVATE
    - source .cirrus/use-gradle-wrapper.sh
    - source set_gradle_build_version
    - regular_gradle_build_deploy_analyze
  on_failure:
    error_log_artifacts:
      path: "hs_err_pid*.log"
    heap_dump_artifacts:
      path: "*.hprof"
  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

ws_scan_task:
  <<: *LINUX_3_5_CPU_7G
  <<: *SETUP_GRADLE_CACHE
  depends_on:
    - build
  # run only on master and long-term branches
  only_if: $CIRRUS_USER_COLLABORATOR == 'true' && ($CIRRUS_BRANCH == "master" || $CIRRUS_BRANCH =~ "branch-.*" || $CIRRUS_BRANCH =~ "mend-.*")
  env:
    WS_APIKEY: VAULT[development/kv/data/mend data.apikey]
    GOPATH: ${HOME}/go
  go_cache:
    folder: ${HOME}/go
  maven_cache:
    folder: ${CIRRUS_WORKING_DIR}/.m2/repository
  whitesource_script:
    - source cirrus-env QA
    - ./gradlew --no-daemon --console plain clean
    - ./gradlew --no-daemon --info --stacktrace --console plain --no-daemon build -x test
    - source ./export_ws_variables_from_gradle
    - source ws_scan.sh
  allow_failures: "true"
  always:
    ws_artifacts:
      path: "whitesource/**/*"

# --- WARNING --- WARNING --- WARNING --- WARNING --- WARNING --- WARNING ---
# The following task names should all be included in promote_task/depends_on
# ---------------------------------------------------------------------------
qa_plug_pub_lin_task:
  <<: *QA_TASK_FILTER
  env:
    ITS_PROJECT: "plugin"
    GRADLE_TASK: ":its:plugin:test"
    matrix:
      - SQ_VERSION: "DEV"
      - SQ_VERSION: "LATEST_RELEASE"
  <<: *LINUX_6_CPU_12G_JAVA_17
  <<: *GRADLE_ITS_TEMPLATE

qa_plug_pri_lin_task:
  <<: *QA_TASK_FILTER
  env:
    ITS_PROJECT: "plugin"
    GRADLE_TASK: ":private:its:plugin:test"
    GIT_SUB_MODULE: "private/its/sources"
    matrix:
      - SQ_VERSION: "LATEST_RELEASE"
      - SQ_VERSION: "DEV"
  <<: *LINUX_6_CPU_12G_JAVA_17
  <<: *GRADLE_ITS_TEMPLATE


qa_plug_pub_win_task:
  <<: *QA_TASK_FILTER
  env:
    SQ_VERSION: LATEST_RELEASE
    GRADLE_TASK: ":its:plugin:test"
    ITS_PROJECT: "plugin"
  <<: *WINDOWS_4_CPU_15G
  <<: *GRADLE_ITS_TEMPLATE_WIN

qa_plug_pri_win_task:
  <<: *QA_TASK_FILTER
  env:
    SQ_VERSION: LATEST_RELEASE
    GRADLE_TASK: ":private:its:plugin:test"
    ITS_PROJECT: "plugin"
    GIT_SUB_MODULE: "private/its/sources"
  <<: *WINDOWS_4_CPU_15G
  <<: *GRADLE_ITS_TEMPLATE_WIN

qa_ruling_ruby_task:
  <<: *QA_TASK_FILTER
  env:
    SQ_VERSION: "LATEST_RELEASE"
    GRADLE_TASK: ":its:ruling:test"
    ITS_PROJECT: "ruling-ruby"
    GIT_SUB_MODULE: "its/sources"
  <<: *LINUX_6_CPU_12G_JAVA_17
  <<: *GRADLE_ITS_TEMPLATE

qa_ruling_scala_task:
  <<: *QA_TASK_FILTER
  env:
    SQ_VERSION: "LATEST_RELEASE"
    GRADLE_TASK: ":its:ruling:test"
    ITS_PROJECT: "ruling-scala"
    GIT_SUB_MODULE: "its/sources"
  <<: *LINUX_6_CPU_12G_JAVA_17
  <<: *GRADLE_ITS_TEMPLATE

qa_ruling_go_task:
  <<: *QA_TASK_FILTER
  env:
    SQ_VERSION: "LATEST_RELEASE"
    GRADLE_TASK: ":its:ruling:test"
    ITS_PROJECT: "ruling-go"
    GIT_SUB_MODULE: "its/sources"
  <<: *LINUX_6_CPU_12G_JAVA_17
  <<: *GRADLE_ITS_TEMPLATE

qa_ruling_apex_task:
  <<: *QA_TASK_FILTER
  env:
    SQ_VERSION: "LATEST_RELEASE"
    GRADLE_TASK: ":private:its:ruling:test"
    ITS_PROJECT: "ruling-apex"
    GIT_SUB_MODULE: "private/its/sources"
  <<: *LINUX_6_CPU_12G_JAVA_17
  <<: *GRADLE_ITS_TEMPLATE

# The build on Windows that was working using openjdk-11.0.8_10 does not work with openjdk-11.0.15_10.
# The task :sonar-ruby-plugin:unpackDependencyGems fails and the underlying command:
#   java.exe -cp jruby-complete-9.1.14.0.jar org.jruby.Main -S gem install racc-1.5.2-java.gem
# Produces:
#    ERROR:  While executing gem ... (Errno::ENOENT)
#            No such file or directory - NUL
#
# build_win_task:
#  <<: *QA_TASK_FILTER
#  <<: *WINDOWS_4_CPU_15G
#  <<: *SETUP_GRADLE_CACHE
#  build_script:
#    - ./gradlew build -Pqa --info --console plain --no-daemon --build-cache
#  <<: *CLEANUP_GRADLE_CACHE_SCRIPT

promote_task:
  depends_on:
    - build
    - qa_plug_pub_lin
    - qa_plug_pri_lin
    - qa_plug_pub_win
    - qa_plug_pri_win
    - qa_ruling_ruby
    - qa_ruling_scala
    - qa_ruling_go
    - qa_ruling_apex
    #- build_win : disabled, see comment above
  <<: *ONLY_IF_SONARSOURCE_QA
  <<: *LINUX_3_5_CPU_7G
  env:
    ARTIFACTORY_PROMOTE_ACCESS_TOKEN: VAULT[development/artifactory/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promoter access_token]
    GITHUB_TOKEN: VAULT[development/github/token/${CIRRUS_REPO_OWNER}-${CIRRUS_REPO_NAME}-promotion token]
  script: 
  - source .cirrus/use-gradle-wrapper.sh
  - cirrus_promote_gradle multi
